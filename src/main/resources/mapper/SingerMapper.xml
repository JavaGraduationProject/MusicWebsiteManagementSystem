<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.test.dao.SingerMapper">
    <resultMap id="BaseResultMap" type="com.example.test.entity.Singer">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <!--jdbctype对应数据内字段类型-->
        <result column="sex" property="sex" jdbcType="TINYINT"/>
        <result column="pic" property="pic" jdbcType="VARCHAR"/>
        <result column="birth" property="birth" jdbcType="TIMESTAMP"/>
        <result column="location" property="location" jdbcType="VARCHAR"/>
        <result column="introduction" property="introduction" jdbcType="VARCHAR"/>
        <association property="song" javaType="com.example.test.entity.Song">
            <id column="id" property="id" jdbcType="INTEGER"/>
            <id column="singer_id" property="singerId" jdbcType="INTEGER"/>
        </association>
        <association property="listSong" javaType="com.example.test.entity.ListSong">
            <id column="song_id" property="songId" jdbcType="INTEGER"/>
        </association>
    </resultMap>
    <sql id="Base_Column_List">
        id
        ,name,sex,pic,birth,location,introduction
    </sql>

    <insert id="insert" parameterType="com.example.test.entity.Singer">
        insert into singer
        (id, name, sex,
         pic, birth, location,
         introduction)
        values (#{id}, #{name}, #{sex},
                #{pic}, #{birth}, #{location},
                #{introduction})
    </insert>

    <update id="update" parameterType="com.example.test.entity.Singer">
        update singer
        <set>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="sex != null">
                sex = #{sex},
            </if>
            <if test="pic != null">
                pic = #{pic},
            </if>
            <if test="birth != null">
                birth = #{birth},
            </if>
            <if test="location != null">
                location = #{location},
            </if>
            <if test="introduction != null">
                introduction = #{introduction},
            </if>
        </set>
        where id = #{id}
    </update>

<!--    <delete id="delete" parameterType="java.lang.Integer">-->
<!--        delete singer,song,list_song-->
<!--        from singer left join(song left join list_song on song.id = list_song.song_id) on singer.id = song.singer_id-->
<!--        where singer.id = #{id}-->
<!--    </delete>-->

    <delete id="delete" parameterType="java.lang.Integer">
        delete
        from singer
        where id = #{id}
    </delete>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from singer
        where id = #{id}
    </select>

    <select id="allSinger" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from singer
        order by id desc
    </select>

    <select id="singerOfName" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from singer
        where name like #{name}
    </select>
    <select id="singerOfSex" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from singer
        where sex = #{sex}
    </select>

    <select id="existSinger" resultType="java.lang.Integer" parameterType="java.lang.String">
        select count(*)
        from singer
        where name = #{name}
    </select>
</mapper>